// Generated by CoffeeScript 1.4.0
(function() {
  var display, displayLoaded, init, loadFrontCamera, loadRearCamera, tablet, tabletLoaded, unloadFrontCamera, unloadRearCamera;

  tablet = window;

  display = window.open('display.html', 'display');

  tabletLoaded = false;

  displayLoaded = false;

  tablet.onload = function() {
    tabletLoaded = true;
    if (displayLoaded) {
      return init();
    }
  };

  display.onload = function() {
    displayLoaded = true;
    if (tabletLoaded) {
      return init();
    }
  };

  tablet.onbeforeunload = function() {
    return display.close();
  };

  init = function() {
    var cameraScreen, data, infoScreen, mapsScreen, netflixScreen, rearCameraScreen, tinderScreen;
    data = {
      tablet: {
        loggedIn: false,
        currentApp: null
      },
      display: {
        mainScreen: "info",
        rearCameraEnabled: false
      }
    };
    tablet.state = data.tablet;
    display.state = data.display;
    window.tabletVue = new Vue({
      el: tablet.document.getElementById("tablet"),
      data: data.tablet,
      methods: {
        login: function() {
          return data.tablet.loggedIn = true;
        },
        launchApp: function(app) {
          data.display.mainScreen = app;
          return data.tablet.currentApp = app;
        },
        closeApp: function() {
          data.display.mainScreen = 'info';
          return data.tablet.currentApp = null;
        },
        toggleRearCamera: function() {
          return data.display.rearCameraEnabled = !data.display.rearCameraEnabled;
        }
      }
    });
    infoScreen = {
      template: display.document.getElementById("info")
    };
    mapsScreen = {
      template: display.document.getElementById("maps")
    };
    netflixScreen = {
      template: display.document.getElementById("netflix")
    };
    cameraScreen = {
      template: display.document.getElementById("camera"),
      beforeMount: loadFrontCamera,
      beforeDestroy: unloadFrontCamera
    };
    tinderScreen = {
      template: display.document.getElementById("tinder")
    };
    rearCameraScreen = {
      template: display.document.getElementById("rear-camera"),
      beforeMount: loadRearCamera,
      beforeDestroy: unloadRearCamera
    };
    return window.displayVue = new Vue({
      el: display.document.getElementById("display"),
      data: data.display,
      components: {
        'info': infoScreen,
        'maps': mapsScreen,
        'netflix': netflixScreen,
        'camera': cameraScreen,
        'tinder': tinderScreen,
        'rear-camera': rearCameraScreen
      }
    });
  };

  loadFrontCamera = function() {
    var desiredCamera, media;
    console.log("Loading Front Camera");
    desiredCamera = 'Microsoft Camera Front';
    media = display.navigator.mediaDevices;
    return media.enumerateDevices().then(function(devices) {
      var cameraID, device, _i, _len, _results;
      devices = devices.filter(function(d) {
        return d.kind === "videoinput";
      });
      cameraID = devices[0].deviceId;
      _results = [];
      for (_i = 0, _len = devices.length; _i < _len; _i++) {
        device = devices[_i];
        console.log("Found Camera:", device.label);
        if (device.label === desiredCamera) {
          cameraID = device.deviceId;
        }
        _results.push(media.getUserMedia({
          audio: false,
          video: {
            deviceId: cameraID
          }
        }).then(function(stream) {
          display.frontStream = stream;
          return display.document.querySelector('#front-video').srcObject = stream;
        }));
      }
      return _results;
    })["catch"](console.log);
  };

  unloadFrontCamera = function() {
    var desiredCamera, track, _i, _len, _ref, _results;
    console.log("Unloading Front Camera");
    desiredCamera = 'Microsoft Camera Front';
    _ref = display.frontStream.getTracks();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      track = _ref[_i];
      if (track.label === desiredCamera) {
        _results.push(track.stop());
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  loadRearCamera = function() {
    var desiredCamera, media;
    console.log("Loading Rear Camera");
    desiredCamera = 'Microsoft Camera Rear';
    media = display.navigator.mediaDevices;
    return media.enumerateDevices().then(function(devices) {
      var cameraID, device, _i, _len, _results;
      devices = devices.filter(function(d) {
        return d.kind === "videoinput";
      });
      cameraID = devices[0].deviceId;
      _results = [];
      for (_i = 0, _len = devices.length; _i < _len; _i++) {
        device = devices[_i];
        console.log("Found Camera:", device.label);
        if (device.label === desiredCamera) {
          cameraID = device.deviceId;
        }
        _results.push(media.getUserMedia({
          audio: false,
          video: {
            deviceId: cameraID
          }
        }).then(function(stream) {
          display.rearStream = stream;
          return display.document.querySelector('#rear-video').srcObject = stream;
        }));
      }
      return _results;
    })["catch"](console.log);
  };

  unloadRearCamera = function() {
    var desiredCamera, track, _i, _len, _ref, _results;
    console.log("Unloading Rear Camera");
    desiredCamera = 'Microsoft Camera Rear';
    _ref = display.rearStream.getTracks();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      track = _ref[_i];
      if (track.label === desiredCamera) {
        _results.push(track.stop());
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

}).call(this);
